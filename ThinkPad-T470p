## Download installation CD image

- [NixOS downloads page](https://nixos.org/nixos/download.html)
 - [Minimal installation CD, 64-bit Intel/AMD](https://d3g5gsiof5omrk.cloudfront.net/nixos/17.09/nixos-17.09.1502.19879836d1/nixos-minimal-17.09.1502.19879836d1-x86_64-linux.iso)

## Format USB drive

- insert USB drive in mac
 - click "Ignore" if warned about an unreadable device
- open Disk Utility
 - select the USB external drive
 - click "Erase"
     - Name: NixOS
     - Format: ExFAT
     - Scheme: GUID Partition Map

## Make bootable USB drive

```
diskutil list
diskutil unmountDisk /dev/disk2
sudo dd bs=4m \
        if=/Users/ivan/Downloads/nixos-minimal-17.09.1502.19879836d1-x86_64-linux.iso \
        of=/dev/disk2
```
When macOS prompts about unreadable disk, select "Eject".

## Boot ThinkPad from USB

- power off ThinkPad
- connect w/ethernet cable
- insert USB
- press power
- hit Enter at Lenovo screen
- F1 to enter BIOS config
- disable secure boot
- choose UEFI boot
- at boot menu, press F12
- select USB drive
- select default NixOS installer

## Setup hard drive

### Partitions

We will only encrypt the Linux LVM partition as the boot process will need to be able to read the EFI System Partition before prompting us for the encryption key.

Double-check the device to partition:
```
fdisk -l
...
```

Start `gdisk`
```
gdisk nvme0n1
p
```

Our goal looks like this:
```
Number  Size    Code  Name
1       500 MB  EF00  EFI System Partition
2       rest    8E00  Linux LVM
```

Delete existing partitions
```
o
p
```

Add EFI System partition
```
n
1
<Enter>
+500M
ef00
```

Add Linux LVM partition
```
n
2
<Enter>
<Enter>
8e00
```

Double-check and write
```
p
w
```

### Write down the partitions

Run `fdisk -l`, identify the EFI System partition and the Linux LVM partition, and jot them down.
Should be /dev/nvme0n1p1 and /dev/nvme0n1p2

### Encryption

```
cryptsetup luksFormat /dev/nvme0n1p2
cryptsetup luksOpen /dev/nvme0n1p2 crypted
```

### Logical volumes

```
pvcreate /dev/mapper/crypted
vgcreate cryptedpool /dev/mapper/crypted
lvcreate --name swap --size 4GB cryptedpool
lvcreate --name root --extents '100%FREE' cryptedpool
```

### Format

```
mkfs.vfat -n BOOT /dev/nvme0n1p1
mkfs.ext4 -L root /dev/cryptedpool/root
mkswap -L swap /dev/cryptedpool/swap
```

### Mount

```
mount /dev/cryptedpool/root /mnt
mkdir /mnt/boot
# mount /dev/nvme0n1p1 /mnt/boot
mount /dev/disk/by-label/BOOT /mnt/boot
swapon /dev/cryptedpool/swap
```

## Generate NixOS configuration

### Generate

```
nixos-generate-config --root /mnt
```

### Write down LVM partition UUID

```
blkid /dev/nvme0n1p2
```

Maybe try wrangling it into nano so we can cut and paste it
```
blkid /dev/nvme0n1p2 >> /mnt/etc/nixos/configuration.nix
```

### Verify hardware-configuration

```
$ cat /mnt/etc/nixos/hardware-configuration.nix

# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, ... }:

{
  imports =
    [ <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/787b4804-5964-4a84-9ef6-44af32504d72";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/2155-F9DA";
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/c4827d41-e9be-4579-a419-67c136bb6844"; }
    ];

  nix.maxJobs = lib.mkDefault 8;
  powerManagement.cpuFreqGovernor = "powersave";
}
```

### Edit configuration.nix

`nano /mnt/etc/nixos/configuration.nix`

Add this
```
boot.initrd.luks.devices = [
  {
    name = "root";
    device = /dev/disk/by-uuid/<the aforementioned UUID here>;
    preLVM = true;
  }
];
```

Should look like this:
```
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];


  boot.initrd.luks.devices = [
    {
      name = "root";
      device = /dev/disk/by-uuid/<LVM-UUID>;
      preLVM = true;
    }
  ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Select internationalisation properties.
  # i18n = {
  #   consoleFont = "Lat2-Terminus16";
  #   consoleKeyMap = "us";
  #   defaultLocale = "en_US.UTF-8";
  # };

  # Set your time zone.
  time.timeZone = "America/New_York";

  # List packages installed in system profile. To search by name, run:
  # $ nix-env -qaP | grep wget
  # environment.systemPackages = with pkgs; [
  #   wget vim
  # ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.bash.enableCompletion = true;
  # programs.mtr.enable = true;
  # programs.gnupg.agent = { enable = true; enableSSHSupport = true; };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable the X11 windowing system.
  # services.xserver.enable = true;
  # services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e";

  # Enable touchpad support.
  # services.xserver.libinput.enable = true;

  # Enable the KDE Desktop Environment.
  # services.xserver.displayManager.sddm.enable = true;
  # services.xserver.desktopManager.plasma5.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  # users.extraUsers.guest = {
  #   isNormalUser = true;
  #   uid = 1000;
  # };

  # This value determines the NixOS release with which your system is to be
  # compatible, in order to avoid breaking some software such as database
  # servers. You should change this only after NixOS release notes say you
  # should.
  system.stateVersion = "17.09"; # Did you read the comment?

}
```

## Install

```
nixos-install
```

## Reboot

```
reboot
```

Select default configuration at the initial screen, and log in as root.

## Start configuring, setting up desktop, user accounts, etc...

First, did we get this far? Can we reliably (re)boot and log in as root?

## Set password

```
passwd ivan
```

## Reboot

Reboot again and log in as ivan
